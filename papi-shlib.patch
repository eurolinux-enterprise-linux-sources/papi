commit 9d9bd9c2f9a2f809f5bdc3564dcd3e485746e401
Author: William Cohen <wcohen@redhat.com>
Date:   Wed Jul 10 10:07:14 2013 -0400

    Fwd: Re: [Ptools-perfapi] ctests/shlib FAILED
    
    Should have sent this to the papi devel list. -Will
    
    -------- Original Message --------
    Subject: Re: [Ptools-perfapi] ctests/shlib FAILED
    Date: Tue, 09 Jul 2013 23:20:10 -0400
    From: William Cohen <wcohen@redhat.com>
    To: ptools-perfapi@eecs.utk.edu
    
    On 03/09/2012 03:40 PM, William Cohen wrote:
    > I was looking through the test results and found that ctests/shlib FAILED on all the machines I tested on because libm shared library is already linked in. There is no difference in the number of shared libraries before and after the dlopen. The test ctests/shlib fails as a reult of this.
    >
    > -Will
    > _______________________________________________
    > Ptools-perfapi mailing list
    > Ptools-perfapi@eecs.utk.edu
    > http://lists.eecs.utk.edu/mailman/listinfo/ptools-perfapi
    >
    
    I did some more investigation of this problem today.  I found that the lmsensor component implicitly pulls in the libm.  As an alternative, I wrote the attached patch that uses setkey() and encrypt() in libcrypt.so instead.  It works on various linux machines, but I do not know whether it is going to work on other OS.
    
    -Will
    
    >From c53c97e1de2d1c7dc0bca64d1906287ff73343c6 Mon Sep 17 00:00:00 2001
    From: William Cohen <wcohen@redhat.com>
    Date: Tue, 9 Jul 2013 22:37:27 -0400
    Subject: [PATCH] Avoid using libm.so for ctests/shlib because of implicit use
     in some components
    
    The lmsensors component can implicitly pull in libm.so into the
    executable.  Unfortunately, the ctests/shlib test expects that libm.so
    is not loaded and will fail because there is no change in the count of
    shared libraries.  The patch uses libcrypt.so library setkey and
    encrypt functions to test PAPI_get_shared_lib_info( ) instead of
    libm.so library pow function.
    
    Signed-off-by: William Cohen <wcohen@redhat.com>

diff --git a/src/ctests/shlib.c b/src/ctests/shlib.c
index 2b00bf6..f3b618a 100644
--- a/src/ctests/shlib.c
+++ b/src/ctests/shlib.c
@@ -8,30 +8,11 @@
 */
 #include "papi_test.h"
 
-int
-main( int argc, char **argv )
+void print_shlib_info_map(const PAPI_shlib_info_t *shinfo)
 {
-	int retval;
+	PAPI_address_map_t *map = shinfo->map;
 	int i;
 
-	const PAPI_shlib_info_t *shinfo;
-	PAPI_address_map_t *map;
-
-	tests_quiet( argc, argv );	/* Set TESTS_QUIET variable */
-
-	if ( ( retval =
-		   PAPI_library_init( PAPI_VER_CURRENT ) ) != PAPI_VER_CURRENT )
-		test_fail( __FILE__, __LINE__, "PAPI_library_init", retval );
-
-	if ( ( shinfo = PAPI_get_shared_lib_info(  ) ) == NULL ) {
-		test_skip( __FILE__, __LINE__, "PAPI_get_shared_lib_info", 1 );
-	}
-
-	if ( ( shinfo->count == 0 ) && ( shinfo->map ) ) {
-		test_fail( __FILE__, __LINE__, "PAPI_get_shared_lib_info", 1 );
-	}
-
-	map = shinfo->map;
 	for ( i = 0; i < shinfo->count; i++ ) {
 		printf( "Library: %s\n", map->name );
 		printf( "Text start: %p, Text end: %p\n", map->text_start,
@@ -57,14 +38,58 @@ main( int argc, char **argv )
 
 		map++;
 	}
+}
+
+void display( char *msg )
+{
+	int i;
+	for (i=0; i<64; i++)
+	{
+		printf( "%1d", (msg[i] ? 1 : 0) );
+	}
+	printf("\n");
+}
+
+int
+main( int argc, char **argv )
+{
+	int retval;
+
+	const PAPI_shlib_info_t *shinfo;
+
+	tests_quiet( argc, argv );	/* Set TESTS_QUIET variable */
+
+	if ( ( retval =
+		   PAPI_library_init( PAPI_VER_CURRENT ) ) != PAPI_VER_CURRENT )
+		test_fail( __FILE__, __LINE__, "PAPI_library_init", retval );
+
+	if ( ( shinfo = PAPI_get_shared_lib_info(  ) ) == NULL ) {
+		test_skip( __FILE__, __LINE__, "PAPI_get_shared_lib_info", 1 );
+	}
+
+	if ( ( shinfo->count == 0 ) && ( shinfo->map ) ) {
+		test_fail( __FILE__, __LINE__, "PAPI_get_shared_lib_info", 1 );
+	}
+
+	print_shlib_info_map(shinfo);
 
 	sleep( 1 );				 /* Needed for debugging, so you can ^Z and stop the process, inspect /proc to see if it's right */
 
 #ifndef NO_DLFCN
 	{
-		char *_libname = "libm.so";
+		char *_libname = "libcrypt.so";
 		void *handle;
-		double ( *pow ) ( double, double );
+		void ( *setkey) (const char *key);
+		void ( *encrypt) (char block[64], int edflag);
+		char key[64]={
+			1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
+			1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
+			1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
+			1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
+		}; /* bit pattern for key */
+		char orig[64];      /* bit pattern for messages */
+		char txt[64];      	    /* bit pattern for messages */
+
 		int oldcount;
 
 		handle = dlopen( _libname, RTLD_NOW );
@@ -75,12 +100,27 @@ main( int argc, char **argv )
 			test_fail( __FILE__, __LINE__, "dlopen", 1 );
 		}
 
-		pow = ( double ( * )( double, double ) ) dlsym( handle, "pow" );
-		if ( pow == NULL ) {
+		setkey = dlsym( handle, "setkey" );
+		encrypt = dlsym( handle, "encrypt" );
+		if ( setkey == NULL || encrypt == NULL) {
 			printf( "dlsym: %s\n", dlerror(  ) );
 			test_fail( __FILE__, __LINE__, "dlsym", 1 );
 		}
-		printf( "2^2 = %lf \n", ( *pow ) ( 2, 2 ) );
+
+		memset(orig,0,64);
+		memcpy(txt,orig,64);
+		setkey(key);
+		
+		printf("original  "); display(txt);
+		encrypt(txt, 0);   /* encode */
+		printf("encrypted "); display(txt);
+		if (!memcmp(txt,orig,64))
+			test_fail( __FILE__, __LINE__, "encode", 1 );
+		encrypt(txt, 1);   /* decode */
+		printf("decrypted "); display(txt);
+		if (memcmp(txt,orig,64))
+			test_fail( __FILE__, __LINE__, "decode", 1 );
+ 
 
 		oldcount = shinfo->count;
 
@@ -98,33 +138,7 @@ main( int argc, char **argv )
 			test_fail( __FILE__, __LINE__, "PAPI_get_shared_lib_info", 1 );
 		}
 
-		map = shinfo->map;
-		for ( i = 0; i < shinfo->count; i++ ) {
-			printf( "Library: %s\n", map->name );
-			printf( "Text start: %p, Text end: %p\n", map->text_start,
-					map->text_end );
-			printf( "Data start: %p, Data end: %p\n", map->data_start,
-					map->data_end );
-			printf( "Bss start: %p, Bss end: %p\n", map->bss_start,
-					map->bss_end );
-
-			if ( strlen( &(map->name[0]) ) == 0 )
-				test_fail( __FILE__, __LINE__, "PAPI_get_shared_lib_info", 1 );
-			if ( ( map->text_start == 0x0 ) || ( map->text_end == 0x0 ) ||
-				 ( map->text_start >= map->text_end ) )
-				test_fail( __FILE__, __LINE__, "PAPI_get_shared_lib_info", 1 );
-/*
-       if ((map->data_start == 0x0) || (map->data_end == 0x0) ||
-	   (map->data_start >= map->data_end))
-	 test_fail(__FILE__, __LINE__, "PAPI_get_shared_lib_info",1);
-       if (((map->bss_start) && (!map->bss_end)) ||
-	   ((!map->bss_start) && (map->bss_end)) ||
-	   (map->bss_start > map->bss_end))
-	 test_fail(__FILE__, __LINE__, "PAPI_get_shared_lib_info",1);
-*/
-
-			map++;
-		}
+		print_shlib_info_map(shinfo);
 
 		sleep( 1 );			 /* Needed for debugging, so you can ^Z and stop the process, inspect /proc to see if it's right */
 
